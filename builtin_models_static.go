// Code generated by go-bindata.
// sources:
// frameworks/tensorflow/builtin_models/MobileNet_v1_0.25_128.yml
// frameworks/tensorflow/builtin_models/MobileNet_v1_0.25_224.yml
// frameworks/tensorflow/builtin_models/MobileNet_v1_0.50_128.yml
// frameworks/tensorflow/builtin_models/MobileNet_v1_0.50_224.yml
// frameworks/tensorflow/builtin_models/MobileNet_v1_0.75_128.yml
// frameworks/tensorflow/builtin_models/MobileNet_v1_0.75_224.yml
// frameworks/tensorflow/builtin_models/MobileNet_v1_1.0_128.yml
// frameworks/tensorflow/builtin_models/MobileNet_v1_1.0_224.yml
// frameworks/tensorflow/builtin_models/inception.yml
// frameworks/tensorflow/builtin_models/resnet152.yaml
// frameworks/tensorflow/builtin_models/resnet50.yml
// frameworks/tensorflow/builtin_models/vgg19.yml
// DO NOT EDIT!

package tensorflow

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mobilenet_v1_025_128Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xbb\x72\xdb\x30\x10\xec\xf1\x15\xf7\x01\x16\x28\xd2\xb2\xec\x61\x91\x2a\x4d\x8a\xd8\x8d\xbb\x4c\x86\x73\x02\x8f\x12\x62\x10\xc0\x1c\x0e\x7a\xb8\xc8\xb7\x67\x00\x6a\xfc\x98\x34\x6e\x38\x3c\x72\x77\x0f\xbb\x77\xf0\x38\x53\x0f\x3f\xc3\xce\x3a\x7a\x24\x19\x8e\xed\xb0\xd6\xdd\xdd\xd0\x76\x0f\x6a\x62\x9c\xe9\x14\xf8\xa5\x57\x00\x0b\xf0\x99\x7c\x0a\x3c\xb9\x70\x52\x00\x47\xe2\x64\x83\xef\xe1\x6f\xab\x3b\x7d\x56\x6f\x75\xab\xd7\xca\x04\x2f\x68\x3d\x71\x21\xe3\x3c\x6e\x37\xe5\x05\x60\x1f\x73\x0f\x8c\x36\x72\xf8\x43\x46\x1a\x83\x3c\xbb\x95\xbc\xe9\xf6\x15\xbb\x32\x31\x57\xb8\xf9\x1a\x7c\x5f\xe1\x31\x9a\xed\xc6\x51\xff\x35\xe6\x15\x7d\xe5\x7e\xe1\x64\x1f\x09\x23\x25\xc3\x36\x4a\xf5\xfb\x4d\xc1\x7b\x84\x09\x90\x09\xd2\x8c\xce\xdd\x80\x0b\xa7\x95\x43\x21\x6f\x2e\x4b\x11\xc3\x89\x18\xe6\x30\x92\x4b\x10\xb1\x24\x2c\xc4\xf6\x95\x46\x90\x00\x33\x91\x80\x1c\x08\x98\x52\xc8\x6c\x08\x4c\xf0\x49\x18\xad\x97\x04\x61\x02\x84\x23\xb2\x25\xb9\x94\x22\x27\x02\x83\x89\x92\x56\x00\xcf\x07\x9b\xc0\x93\x94\x79\x55\x96\x4d\x0b\xa5\xed\x1e\xc0\xe1\x85\x38\x01\xfa\x11\xd0\x1c\x2c\x1d\x29\xc1\xa6\xd5\xb7\x20\x21\xae\xda\xfa\x7d\xbb\xd5\x5d\x2d\xef\x00\x8d\xc9\x8c\xe6\xa2\x15\xd3\x44\x4c\xde\x50\x2a\x99\xae\xe0\x20\x12\x53\xdf\x34\xc8\x67\x7b\xd4\x81\xf7\x4d\x1c\xa7\xa6\xbd\x5f\x6f\xf4\x7a\xf3\xb0\x6d\x75\x1c\x27\xe5\xac\x21\x9f\xca\xb2\x3c\x7d\x7f\x52\xd6\xc7\x2c\x57\xba\x5c\x22\xf5\x60\x67\xdc\x53\x4d\xfc\x53\x88\xc5\x76\x05\x7f\x00\xbc\x05\x94\x96\x99\x02\x8c\x76\x26\x5f\xb6\x2c\xf5\xf0\xab\xbd\x81\xdb\x1b\xe8\xba\x4d\x7d\xfc\x56\x21\x4b\xcc\x52\xa0\x4b\xa7\x89\x50\x32\x17\xa9\x4f\x9d\xd0\xc3\x82\x5c\x3a\x95\xd4\xc0\xe1\x8e\x9c\xfa\xbf\xe3\x55\x22\x0d\x99\x5d\x5f\xfd\xf7\x4d\x33\xa2\xa0\x1e\x67\x67\xf4\xec\x9a\xf9\xec\x49\x9a\x65\xa2\x4d\x15\x2c\x75\xba\xf8\x44\xa2\xe5\x2c\xaa\xfe\x2a\x6a\xe6\x40\xe6\x25\x06\xeb\xe5\x5d\x29\x9c\xbc\x0b\x38\xea\xf7\x35\xab\xb1\x5e\xe5\xe6\xba\x54\xfe\xf3\xbd\x1c\xba\x75\x7b\x3f\xac\xb7\x43\xbb\xd1\x82\xac\xf7\xaf\x0a\xc0\xa6\x01\xd9\x1c\xec\x91\x7a\x10\xce\xa4\x50\x84\xed\x2e\xcb\x32\xba\x19\xbd\x9d\x28\xc9\x80\x59\x0e\x81\x7b\xc0\xdd\x98\xdd\x58\x92\x62\xb4\xce\xfa\xfd\x50\x4c\x25\x92\x1e\x7e\x14\x0f\x8f\x24\xea\x5f\x00\x00\x00\xff\xff\xbb\x7f\xe7\xa0\x1c\x04\x00\x00"

func mobilenet_v1_025_128YmlBytes() ([]byte, error) {
	return bindataRead(
		_mobilenet_v1_025_128Yml,
		"MobileNet_v1_0.25_128.yml",
	)
}

func mobilenet_v1_025_128Yml() (*asset, error) {
	bytes, err := mobilenet_v1_025_128YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "MobileNet_v1_0.25_128.yml", size: 1052, mode: os.FileMode(420), modTime: time.Unix(1501275297, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mobilenet_v1_025_224Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xbb\x72\xdb\x30\x10\xec\xf1\x15\xf7\x01\x16\x48\x2a\x92\x9c\x61\x91\x2a\x4d\x8a\xd8\x8d\xbb\x4c\x86\x73\x02\x8f\x12\x62\x10\xc0\x1c\x0e\x7a\xb8\xc8\xb7\x67\x00\x6a\xfc\x98\x34\x6e\x38\x3c\x72\x77\x0f\xbb\x77\xf0\x38\x53\x0f\x3f\xc3\xde\x3a\x7a\x20\x19\x4e\xdd\xd0\xea\xf5\x76\x58\xaf\x37\x6a\x62\x9c\xe9\x1c\xf8\xb9\x57\x00\x0b\xf0\x89\x7c\x0a\x3c\xb9\x70\x56\x00\x27\xe2\x64\x83\xef\xe1\x6f\xa7\xd7\xfa\xa2\x5e\xeb\x4e\xb7\xca\x04\x2f\x68\x3d\x71\x21\xe3\x3c\xee\x36\xe5\x05\xe0\x10\x73\x0f\x8c\x36\x72\xf8\x43\x46\x1a\x83\x3c\xbb\x95\xbc\xea\xf6\x15\xbb\x32\x31\x57\xb8\xf9\x1c\xfc\x50\xe1\x31\x9a\xdd\xc6\x51\xff\x39\xe6\x0d\x7d\xe3\x7e\xe2\x64\xef\x09\x23\x25\xc3\x36\x4a\xf5\xfb\x4d\xc1\x5b\x84\x09\x90\x09\xd2\x8c\xce\xdd\x81\x0b\xe7\x95\x43\x21\x6f\xae\x4b\x11\xc3\x99\x18\xe6\x30\x92\x4b\x10\xb1\x24\x2c\xc4\xf6\x85\x46\x90\x00\x33\x91\x80\x1c\x09\x98\x52\xc8\x6c\x08\x4c\xf0\x49\x18\xad\x97\x04\x61\x02\x84\x13\xb2\x25\xb9\x96\x22\x27\x02\x83\x89\x92\x56\x00\x4f\x47\x9b\xc0\x93\x94\x79\x55\x96\x4d\x0b\x65\xbd\xde\x80\xc3\x2b\x71\x02\xf4\x23\xa0\x39\x5a\x3a\x51\x82\x6d\xab\x77\x20\x21\xae\xba\xfa\xfd\x7e\xab\xdb\x5a\x6e\x01\x8d\xc9\x8c\xe6\xaa\x15\xd3\x44\x4c\xde\x50\x2a\x99\xae\xe0\x28\x12\x53\xdf\x34\xc8\x17\x7b\xd2\x81\x0f\x4d\x1c\xa7\xa6\xbb\x6f\x37\xba\xdd\x7c\xdd\x75\x3a\x8e\x93\x72\xd6\x90\x4f\x65\x59\x1e\xbf\x3f\x2a\xeb\x63\x96\x1b\x5d\xae\x91\x7a\xb0\x33\x1e\xa8\x26\xfe\x21\xc4\x62\xbb\x82\xdf\x01\x5e\x03\x4a\xcb\x4c\x01\x46\x3b\x93\x2f\x5b\x96\x7a\xf8\xd5\xdd\xc1\x97\xbb\x62\xb0\x3e\x7e\xab\x90\x25\x66\x29\xd0\xa5\xd3\x44\x28\x99\x8b\xd4\x87\x4e\xe8\x61\x41\x2e\x9d\x4a\x6a\xe0\x70\x4f\x4e\xfd\xdf\xf1\x26\x91\x86\xcc\xae\xaf\xfe\xfb\xa6\x19\x51\x50\x8f\xb3\x33\x7a\x76\xcd\x7c\xf1\x24\xcd\x32\xd1\xa6\x0a\x96\x3a\x5d\x7d\x22\xd1\x72\x11\x55\x7f\x15\x35\x73\x24\xf3\x1c\x83\xf5\xf2\xa6\x14\xce\xde\x05\x1c\xf5\xdb\x9a\xd5\x58\x6f\x72\x73\x5d\x2a\xff\xf1\x5e\x0e\xeb\xb6\xbb\x1f\xda\xdd\xd0\x6d\xb4\x20\xeb\xc3\x8b\x02\xb0\x69\x40\x36\x47\x7b\xa2\x1e\x84\x33\x29\x14\x61\xbb\xcf\xb2\x8c\x6e\x46\x6f\x27\x4a\x32\x60\x96\x63\xe0\x1e\x70\x3f\x66\x37\x96\xa4\x18\xad\xb3\xfe\x30\x14\x53\x89\xa4\x87\x1f\xc5\xc3\x03\x89\xfa\x17\x00\x00\xff\xff\x41\x28\x77\x21\x1c\x04\x00\x00"

func mobilenet_v1_025_224YmlBytes() ([]byte, error) {
	return bindataRead(
		_mobilenet_v1_025_224Yml,
		"MobileNet_v1_0.25_224.yml",
	)
}

func mobilenet_v1_025_224Yml() (*asset, error) {
	bytes, err := mobilenet_v1_025_224YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "MobileNet_v1_0.25_224.yml", size: 1052, mode: os.FileMode(420), modTime: time.Unix(1501275297, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mobilenet_v1_050_128Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xbb\x72\xdb\x30\x10\xec\xf1\x15\xf7\x01\x16\x28\x2a\xb2\xec\xb0\x48\x95\x26\x45\xec\xc6\x5d\x26\xc3\x39\x81\x47\x11\x31\x08\x60\x0e\x07\x3d\x5c\xe4\xdb\x33\x00\x35\x7e\x4c\x1a\x37\x1c\x1e\xb9\xbb\x87\xdd\x3b\x78\x9c\xa9\x83\x9f\x61\x6f\x1d\x3d\x90\xf4\xc7\xb6\x5f\xeb\xdb\x75\xdf\x6e\xee\xd5\xc8\x38\xd3\x29\xf0\x73\xa7\x00\x16\xe0\x13\xf9\x14\x78\x74\xe1\xa4\x00\x8e\xc4\xc9\x06\xdf\xc1\xdf\x56\x6f\xf4\x59\xbd\xd6\xad\x5e\x2b\x13\xbc\xa0\xf5\xc4\x85\x8c\xf3\xb0\xdb\x96\x17\x80\x43\xcc\x1d\x30\xda\xc8\xe1\x0f\x19\x69\x0c\xf2\xec\x56\xf2\xaa\xdb\x55\xec\xca\xc4\x5c\xe1\xe6\x73\xf0\x43\x85\xc7\x68\x76\x5b\x47\xdd\xe7\x98\x57\xf4\x95\xfb\x89\x93\xbd\x27\x0c\x94\x0c\xdb\x28\xd5\xef\x37\x05\x6f\x11\x26\x40\x26\x48\x33\x3a\x77\x03\x2e\x9c\x56\x0e\x85\xbc\xb9\x2c\x45\x0c\x27\x62\x98\xc3\x40\x2e\x41\xc4\x92\xb0\x10\xdb\x17\x1a\x40\x02\xcc\x44\x02\x32\x11\x30\xa5\x90\xd9\x10\x98\xe0\x93\x30\x5a\x2f\x09\xc2\x08\x08\x47\x64\x4b\x72\x29\x45\x4e\x04\x06\x13\x25\xad\x00\x9e\x26\x9b\xc0\x93\x94\x79\x55\x96\x4d\x0b\xa5\xdd\xdc\x83\xc3\x0b\x71\x02\xf4\x03\xa0\x99\x2c\x1d\x29\xc1\xed\x4e\x6f\x40\x42\x5c\xb5\xf5\xfb\xdd\x57\xbd\xab\xe5\x2d\xa0\x31\x99\xd1\x5c\xb4\x62\x1a\x89\xc9\x1b\x4a\x25\xd3\x15\x4c\x22\x31\x75\x4d\x83\x7c\xb6\x47\x1d\xf8\xd0\xc4\x61\x6c\xda\xbb\xf5\x56\xaf\xb7\xf7\xbb\x56\xc7\x61\x54\xce\x1a\xf2\xa9\x2c\xcb\xe3\xf7\x47\x65\x7d\xcc\x72\xa5\xcb\x25\x52\x07\x76\xc6\x03\xd5\xc4\x3f\x84\x58\x6c\x57\xf0\x3b\xc0\x6b\x40\x69\x99\x29\xc0\x60\x67\xf2\x65\xcb\x52\x07\xbf\xda\x1b\xf8\x72\x03\x9b\xcd\xb6\x3e\x7e\xab\x90\x25\x66\x29\xd0\xa5\xd3\x48\x28\x99\x8b\xd4\x87\x4e\xe8\x61\x41\x2e\x9d\x4a\x6a\xe0\x70\x4f\x4e\xfd\xdf\xf1\x2a\x91\xfa\xcc\xae\xab\xfe\xbb\xa6\x19\x50\x50\x0f\xb3\x33\x7a\x76\xcd\x7c\xf6\x24\xcd\x32\xd1\xa6\x0a\x96\x3a\x5d\x7c\x22\xd1\x72\x16\x55\x7f\x15\x35\x33\x91\x79\x8e\xc1\x7a\x79\x53\x0a\x27\xef\x02\x0e\xfa\x6d\xcd\x6a\xac\x57\xb9\xb9\x2e\x95\xff\x78\x2f\xfb\xcd\xba\xbd\xeb\xd7\xbb\xbe\xdd\x6a\x41\xd6\x87\x17\x05\x60\x53\x8f\x6c\x26\x7b\xa4\x0e\x84\x33\x29\x14\x61\xbb\xcf\xb2\x8c\x6e\x46\x6f\x47\x4a\xd2\x63\x96\x29\x70\x07\xb8\x1f\xb2\x1b\x4a\x52\x8c\xd6\x59\x7f\xe8\x8b\xa9\x44\xd2\xc1\x8f\xe2\xe1\x81\x44\xfd\x0b\x00\x00\xff\xff\xe2\xa4\x20\xfa\x1c\x04\x00\x00"

func mobilenet_v1_050_128YmlBytes() ([]byte, error) {
	return bindataRead(
		_mobilenet_v1_050_128Yml,
		"MobileNet_v1_0.50_128.yml",
	)
}

func mobilenet_v1_050_128Yml() (*asset, error) {
	bytes, err := mobilenet_v1_050_128YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "MobileNet_v1_0.50_128.yml", size: 1052, mode: os.FileMode(420), modTime: time.Unix(1501275297, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mobilenet_v1_050_224Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xbb\x72\xe4\x38\x0c\xcc\xf9\x15\xf8\x00\x0f\x25\xcd\xc9\x63\x97\x82\x8b\x2e\xb9\xe0\xec\xc4\xd9\xd5\x96\x0a\x43\x41\x33\x5c\x53\x24\x0b\x04\xe7\xe1\x60\xbf\x7d\x8b\xd4\x94\x1f\xb5\x89\x13\x95\x20\x75\x37\xd8\x0d\xd0\xe3\x42\x03\xfc\x17\xf6\xd6\xd1\x13\xc9\x78\xea\xc6\x56\xdf\xb7\xe3\x76\xdb\xab\x99\x71\xa1\x73\xe0\xd7\x41\x01\xac\xc0\x17\xf2\x29\xf0\xec\xc2\x59\x01\x9c\x88\x93\x0d\x7e\x80\x5f\x9d\xde\xea\x8b\x7a\xaf\x3b\xdd\x2a\x13\xbc\xa0\xf5\xc4\x85\x8c\xcb\xb4\xeb\xcb\x0b\xc0\x21\xe6\x01\x18\x6d\xe4\xf0\x93\x8c\x34\x06\x79\x71\x1b\x79\xd7\x1d\x2a\x76\x63\x62\xae\x70\xf3\x3d\xf8\xa1\xc2\x63\x34\xbb\xde\xd1\xf0\x3d\xe6\x0d\x7d\xe3\x7e\xe3\x64\x9f\x09\x13\x25\xc3\x36\x4a\xf5\xfb\xb7\x82\x8f\x08\x13\x20\x13\xa4\x05\x9d\xbb\x03\x17\xce\x1b\x87\x42\xde\x5c\xd7\x22\x86\x33\x31\x2c\x61\x22\x97\x20\x62\x49\x58\x88\xed\x1b\x4d\x20\x01\x16\x22\x01\x39\x12\x30\xa5\x90\xd9\x10\x98\xe0\x93\x30\x5a\x2f\x09\xc2\x0c\x08\x27\x64\x4b\x72\x2d\x45\x4e\x04\x06\x13\x25\xad\x00\x5e\x8e\x36\x81\x27\x29\xf3\xaa\x2c\x9b\x56\xca\x76\xdb\x83\xc3\x2b\x71\x02\xf4\x13\xa0\x39\x5a\x3a\x51\x82\x5d\xaf\x5b\x90\x10\x37\x5d\xfd\xfe\x78\xaf\xfb\x5a\xde\x03\x1a\x93\x19\xcd\x55\x2b\xa6\x99\x98\xbc\xa1\x54\x32\xdd\xc0\x51\x24\xa6\xa1\x69\x90\x2f\xf6\xa4\x03\x1f\x9a\x38\xcd\x4d\xf7\xd0\xf6\xba\xed\x1f\x77\x9d\x8e\xd3\xac\x9c\x35\xe4\x53\x59\x96\xe7\x7f\x9e\x95\xf5\x31\xcb\x8d\x2e\xd7\x48\x03\xd8\x05\x0f\x54\x13\xff\x12\x62\xb1\x5d\xc1\x9f\x00\xef\x01\xa5\x75\xa6\x00\x93\x5d\xc8\x97\x2d\x4b\x03\xfc\xdf\xdd\xc1\x5f\x77\xc5\x60\x7d\xfc\x50\x21\x4b\xcc\x52\xa0\x6b\xa7\x99\x50\x32\x17\xa9\x2f\x9d\xd0\xc3\x8a\x5c\x3b\x95\xd4\xc0\xe1\x9e\x9c\xfa\xb3\xe3\x4d\x22\x8d\x99\xdd\x50\xfd\x0f\x4d\x33\xa1\xa0\x9e\x16\x67\xf4\xe2\x9a\xe5\xe2\x49\x9a\x75\xa2\x4d\x15\x2c\x75\xba\xfa\x44\xa2\xe5\x22\xaa\xfe\x2a\x6a\xe6\x48\xe6\x35\x06\xeb\xe5\x43\x29\x9c\xbd\x0b\x38\xe9\x8f\x35\xab\xb1\xde\xe4\x96\xba\x54\xfe\xeb\xbd\x1c\xb7\x6d\xf7\x30\xb6\xbb\xb1\xeb\xb5\x20\xeb\xc3\x9b\x02\xb0\x69\x44\x36\x47\x7b\xa2\x01\x84\x33\x29\x14\x61\xbb\xcf\xb2\x8e\x6e\x41\x6f\x67\x4a\x32\x62\x96\x63\xe0\x01\x70\x3f\x65\x37\x95\xa4\x18\xad\xb3\xfe\x30\x16\x53\x89\x64\x80\x7f\x8b\x87\x27\x12\xf5\x3b\x00\x00\xff\xff\xda\xdb\x1d\x25\x1c\x04\x00\x00"

func mobilenet_v1_050_224YmlBytes() ([]byte, error) {
	return bindataRead(
		_mobilenet_v1_050_224Yml,
		"MobileNet_v1_0.50_224.yml",
	)
}

func mobilenet_v1_050_224Yml() (*asset, error) {
	bytes, err := mobilenet_v1_050_224YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "MobileNet_v1_0.50_224.yml", size: 1052, mode: os.FileMode(420), modTime: time.Unix(1501275297, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mobilenet_v1_075_128Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x3d\x73\xe3\x3a\x0c\xec\xf9\x2b\xf0\x03\x62\xca\x72\x1c\xc7\xa3\xe2\x55\xaf\x79\xc5\x4b\x9a\x74\x37\x37\x1a\x98\x82\x2c\x5e\x28\x92\x03\x82\xfe\x48\x71\xbf\xfd\x86\x94\x27\x1f\x73\x4d\x1a\x8d\x20\xed\x2e\xb8\x0b\xd0\xe3\x4c\x1d\xfc\x1f\x0e\xd6\xd1\x13\x49\x7f\x6a\xfb\xb5\x7e\x7c\xe8\xdb\xcd\x5e\x8d\x8c\x33\x9d\x03\xbf\x76\x0a\x60\x01\xbe\x90\x4f\x81\x47\x17\xce\x0a\xe0\x44\x9c\x6c\xf0\x1d\xfc\x6e\xf5\x46\x5f\xd4\x7b\xdd\xea\xb5\x32\xc1\x0b\x5a\x4f\x5c\xc8\x38\x0f\xbb\x6d\x79\x01\x38\xc6\xdc\x01\xa3\x8d\x1c\x7e\x91\x91\xc6\x20\xcf\x6e\x25\xef\xba\x5d\xc5\xae\x4c\xcc\x15\x6e\xbe\x07\x3f\x56\x78\x8c\x66\xb7\x75\xd4\x7d\x8f\x79\x43\xdf\xb8\xdf\x38\xd9\x67\xc2\x40\xc9\xb0\x8d\x52\xfd\xfe\xa3\xe0\x23\xc2\x04\xc8\x04\x69\x46\xe7\xee\xc0\x85\xf3\xca\xa1\x90\x37\xd7\xa5\x88\xe1\x4c\x0c\x73\x18\xc8\x25\x88\x58\x12\x16\x62\xfb\x46\x03\x48\x80\x99\x48\x40\x26\x02\xa6\x14\x32\x1b\x02\x13\x7c\x12\x46\xeb\x25\x41\x18\x01\xe1\x84\x6c\x49\xae\xa5\xc8\x89\xc0\x60\xa2\xa4\x15\xc0\xcb\x64\x13\x78\x92\x32\xaf\xca\xb2\x69\xa1\xb4\x9b\x3d\x38\xbc\x12\x27\x40\x3f\x00\x9a\xc9\xd2\x89\x12\xec\x5a\xbd\x07\x09\x71\xd5\xd6\xef\xfb\x7b\xbd\xab\xe5\x03\xa0\x31\x99\xd1\x5c\xb5\x62\x1a\x89\xc9\x1b\x4a\x25\xd3\x15\x4c\x22\x31\x75\x4d\x83\x7c\xb1\x27\x1d\xf8\xd8\xc4\x61\x6c\xda\xc7\xf5\x56\xaf\xb7\xfb\x5d\xab\xe3\x30\x2a\x67\x0d\xf9\x54\x96\xe5\xf9\xdf\x67\x65\x7d\xcc\x72\xa3\xcb\x35\x52\x07\x76\xc6\x23\xd5\xc4\xbf\x84\x58\x6c\x57\xf0\x27\xc0\x7b\x40\x69\x99\x29\xc0\x60\x67\xf2\x65\xcb\x52\x07\x3f\xda\x3b\xb8\xbf\x83\xcd\x66\x5b\x1f\x3f\x55\xc8\x12\xb3\x14\xe8\xd2\x69\x24\x94\xcc\x45\xea\x4b\x27\xf4\xb0\x20\x97\x4e\x25\x35\x70\x78\x20\xa7\xfe\xee\x78\x93\x48\x7d\x66\xd7\x55\xff\x5d\xd3\x0c\x28\xa8\x87\xd9\x19\x3d\xbb\x66\xbe\x78\x92\x66\x99\x68\x53\x05\x4b\x9d\xae\x3e\x91\x68\xb9\x88\xaa\xbf\x8a\x9a\x99\xc8\xbc\xc6\x60\xbd\x7c\x28\x85\xb3\x77\x01\x07\xfd\xb1\x66\x35\xd6\x9b\xdc\x5c\x97\xca\x7f\xbd\x97\xfd\x66\xdd\x3e\xf6\xeb\x5d\xdf\x6e\xb5\x20\xeb\xe3\x9b\x02\xb0\xa9\x47\x36\x93\x3d\x51\x07\xc2\x99\x14\x8a\xb0\x3d\x64\x59\x46\x37\xa3\xb7\x23\x25\xe9\x31\xcb\x14\xb8\x03\x3c\x0c\xd9\x0d\x25\x29\x46\xeb\xac\x3f\xf6\xc5\x54\x22\xe9\xe0\xbf\xe2\xe1\x89\x44\xfd\x09\x00\x00\xff\xff\x59\x18\x31\xb6\x1c\x04\x00\x00"

func mobilenet_v1_075_128YmlBytes() ([]byte, error) {
	return bindataRead(
		_mobilenet_v1_075_128Yml,
		"MobileNet_v1_0.75_128.yml",
	)
}

func mobilenet_v1_075_128Yml() (*asset, error) {
	bytes, err := mobilenet_v1_075_128YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "MobileNet_v1_0.75_128.yml", size: 1052, mode: os.FileMode(420), modTime: time.Unix(1501275297, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mobilenet_v1_075_224Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x3d\x73\xe3\x3a\x0c\xec\xf9\x2b\xf0\x03\x62\xca\xf2\x73\xec\x3c\x15\xaf\x7a\xcd\x15\x97\x34\xe9\x6e\x6e\x34\x30\x05\x59\xbc\x50\x24\x07\x04\xfd\x91\xe2\x7e\xfb\x0d\x29\x4f\x3e\xe6\x9a\x34\x1a\x41\xda\x5d\x70\x17\xa0\xc7\x99\x3a\xf8\x1e\x0e\xd6\xd1\x23\x49\x7f\x6a\xfb\xb5\xde\xdf\xf7\x9b\xcd\x56\x8d\x8c\x33\x9d\x03\xbf\x74\x0a\x60\x01\x3e\x93\x4f\x81\x47\x17\xce\x0a\xe0\x44\x9c\x6c\xf0\x1d\xfc\x6e\xf5\x46\x5f\xd4\x5b\xdd\xea\xb5\x32\xc1\x0b\x5a\x4f\x5c\xc8\x38\x0f\xbb\x6d\x79\x01\x38\xc6\xdc\x01\xa3\x8d\x1c\x7e\x91\x91\xc6\x20\xcf\x6e\x25\x6f\xba\x5d\xc5\xae\x4c\xcc\x15\x6e\xbe\x06\x3f\x56\x78\x8c\x66\xb7\x75\xd4\x7d\x8d\x79\x43\xdf\xb8\x5f\x38\xd9\x47\xc2\x40\xc9\xb0\x8d\x52\xfd\xfe\xa7\xe0\x3d\xc2\x04\xc8\x04\x69\x46\xe7\xee\xc0\x85\xf3\xca\xa1\x90\x37\xd7\xa5\x88\xe1\x4c\x0c\x73\x18\xc8\x25\x88\x58\x12\x16\x62\xfb\x4a\x03\x48\x80\x99\x48\x40\x26\x02\xa6\x14\x32\x1b\x02\x13\x7c\x12\x46\xeb\x25\x41\x18\x01\xe1\x84\x6c\x49\xae\xa5\xc8\x89\xc0\x60\xa2\xa4\x15\xc0\xf3\x64\x13\x78\x92\x32\xaf\xca\xb2\x69\xa1\x6c\x36\x5b\x70\x78\x25\x4e\x80\x7e\x00\x34\x93\xa5\x13\x25\xd8\xaf\xf5\x1e\x24\xc4\x55\x5b\xbf\x3f\xfc\xab\xef\x6b\x79\x0f\x68\x4c\x66\x34\x57\xad\x98\x46\x62\xf2\x86\x52\xc9\x74\x05\x93\x48\x4c\x5d\xd3\x20\x5f\xec\x49\x07\x3e\x36\x71\x18\x9b\x76\xbf\xde\xea\xf5\xf6\x61\xd7\xea\x38\x8c\xca\x59\x43\x3e\x95\x65\x79\xfa\xff\x49\x59\x1f\xb3\xdc\xe8\x72\x8d\xd4\x81\x9d\xf1\x48\x35\xf1\x4f\x21\x16\xdb\x15\xfc\x01\xf0\x16\x50\x5a\x66\x0a\x30\xd8\x99\x7c\xd9\xb2\xd4\xc1\x8f\xf6\x0e\xfe\xb9\x2b\x06\xeb\xe3\xa7\x0a\x59\x62\x96\x02\x5d\x3a\x8d\x84\x92\xb9\x48\x7d\xea\x84\x1e\x16\xe4\xd2\xa9\xa4\x06\x0e\x0f\xe4\xd4\xdf\x1d\x6f\x12\xa9\xcf\xec\xba\xea\xbf\x6b\x9a\x01\x05\xf5\x30\x3b\xa3\x67\xd7\xcc\x17\x4f\xd2\x2c\x13\x6d\xaa\x60\xa9\xd3\xd5\x27\x12\x2d\x17\x51\xf5\x57\x51\x33\x13\x99\x97\x18\xac\x97\x77\xa5\x70\xf6\x2e\xe0\xa0\xdf\xd7\xac\xc6\x7a\x93\x9b\xeb\x52\xf9\xcf\xf7\xb2\xdf\xac\xdb\x7d\xbf\xde\xf5\xed\x56\x0b\xb2\x3e\xbe\x2a\x00\x9b\x7a\x64\x33\xd9\x13\x75\x20\x9c\x49\xa1\x08\xdb\x43\x96\x65\x74\x33\x7a\x3b\x52\x92\x1e\xb3\x4c\x81\x3b\xc0\xc3\x90\xdd\x50\x92\x62\xb4\xce\xfa\x63\x5f\x4c\x25\x92\x0e\xbe\x15\x0f\x8f\x24\xea\x4f\x00\x00\x00\xff\xff\x8c\xff\xf7\x35\x1c\x04\x00\x00"

func mobilenet_v1_075_224YmlBytes() ([]byte, error) {
	return bindataRead(
		_mobilenet_v1_075_224Yml,
		"MobileNet_v1_0.75_224.yml",
	)
}

func mobilenet_v1_075_224Yml() (*asset, error) {
	bytes, err := mobilenet_v1_075_224YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "MobileNet_v1_0.75_224.yml", size: 1052, mode: os.FileMode(420), modTime: time.Unix(1501275297, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mobilenet_v1_10_128Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x3d\x73\xe3\x3a\x0c\xec\xf9\x2b\xf0\x03\x62\xca\x72\x1c\xc7\xa3\xe2\x55\xaf\x79\xc5\x4b\x9a\x74\x37\x37\x1a\x98\x82\x2c\x5e\x28\x92\x03\x82\xfe\x48\x71\xbf\xfd\x86\x94\x27\x1f\x73\x4d\x1a\x8d\x20\xed\x2e\xb8\x0b\xd0\xe3\x4c\x1d\xfc\x1f\x0e\xd6\xd1\x13\x49\x7f\x6a\xfb\x56\xaf\xfb\x76\xb3\x57\x23\xe3\x4c\xe7\xc0\xaf\x9d\x02\x58\x70\x2f\xe4\x53\xe0\xd1\x85\xb3\x02\x38\x11\x27\x1b\x7c\x07\xbf\x5b\xbd\xd1\x17\xf5\x5e\xb7\x7a\xad\x4c\xf0\x82\xd6\x13\x17\x32\xce\xc3\x6e\x5b\x5e\x00\x8e\x31\x77\xc0\x68\x23\x87\x5f\x64\xa4\x31\xc8\xb3\x5b\xc9\xbb\x6e\x57\xb1\x2b\x13\x73\x85\x9b\xef\xc1\x8f\x15\x1e\xa3\xd9\x6d\x1d\x75\xdf\x63\xde\xd0\x37\xee\x37\x4e\xf6\x99\x30\x50\x32\x6c\xa3\x54\xbf\xff\x28\xf8\x48\x30\x01\x32\x41\x9a\xd1\xb9\x3b\x70\xe1\xbc\x72\x28\xe4\xcd\x75\x29\x62\x38\x13\xc3\x1c\x06\x72\x09\x22\x96\x84\x85\xd8\xbe\xd1\x00\x12\x60\x26\x12\x90\x89\x80\x29\x85\xcc\x86\xc0\x04\x9f\x84\xd1\x7a\x49\x10\x46\x40\x38\x21\x5b\x92\x6b\x29\x72\x22\x30\x98\x28\x69\x05\xf0\x32\xd9\x04\x9e\xa4\xcc\xab\xb2\x6c\x5a\x28\xed\x66\x0f\x0e\xaf\xc4\x09\xd0\x0f\x80\x66\xb2\x74\xa2\x04\xbb\xad\x6e\x41\x42\x5c\xb5\xf5\xfb\xfe\x41\xdf\xd7\xf2\x01\xd0\x98\xcc\x68\xae\x5a\x31\x8d\xc4\xe4\x0d\xa5\x92\xe9\x0a\x26\x91\x98\xba\xa6\x41\xbe\xd8\x93\x0e\x7c\x6c\xe2\x30\x36\xed\xe3\x7a\xab\xd7\xdb\xfd\xae\xd5\x71\x18\x95\xb3\x86\x7c\x2a\xcb\xf2\xfc\xef\xb3\xb2\x3e\x66\xb9\xd1\xe5\x1a\xa9\x03\x3b\xe3\x91\x6a\xe2\x5f\x42\x2c\xb6\x2b\xf8\x13\xe0\x3d\xa0\xb4\xcc\x14\x60\xb0\x33\xf9\xb2\x65\xa9\x83\x1f\xed\x1d\xdc\xdf\xc1\x66\xb3\xad\x8f\x9f\x2a\x64\x89\x59\x0a\x74\xe9\x34\x12\x4a\xe6\x22\xf5\xa5\x13\x7a\x58\x90\x4b\xa7\x92\x1a\x38\x3c\x90\x53\x7f\x77\xbc\x49\xa4\x3e\xb3\xeb\xaa\xff\xae\x69\x06\x14\xd4\xc3\xec\x8c\x9e\x5d\x33\x5f\x3c\x49\xb3\x4c\xb4\xa9\x82\xa5\x4e\x57\x9f\x48\xb4\x5c\x44\xd5\x5f\x45\xcd\x4c\x64\x5e\x63\xb0\x5e\x3e\x94\xc2\xd9\xbb\x80\x83\xfe\x58\xb3\x1a\xeb\x4d\x6e\xae\x4b\xe5\xbf\x5c\xcb\x7e\xb3\x6e\x1f\xfb\xf5\xae\x6f\xb7\x5a\x90\xf5\xf1\x4d\x01\xd8\xd4\x23\x9b\xc9\x9e\xa8\x03\xe1\x4c\x0a\x45\xd8\x1e\xb2\x2c\x93\x9b\xd1\xdb\x91\x92\xf4\x98\x65\x0a\xdc\x01\x1e\x86\xec\x86\x12\x14\xa3\x75\xd6\x1f\xfb\xe2\x29\x91\x74\xf0\x5f\xb1\xf0\x44\xa2\xfe\x04\x00\x00\xff\xff\xe3\x4d\x3e\x0f\x1a\x04\x00\x00"

func mobilenet_v1_10_128YmlBytes() ([]byte, error) {
	return bindataRead(
		_mobilenet_v1_10_128Yml,
		"MobileNet_v1_1.0_128.yml",
	)
}

func mobilenet_v1_10_128Yml() (*asset, error) {
	bytes, err := mobilenet_v1_10_128YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "MobileNet_v1_1.0_128.yml", size: 1050, mode: os.FileMode(420), modTime: time.Unix(1501275297, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mobilenet_v1_10_224Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x3d\x73\xe3\x3a\x0c\xec\xf9\x2b\xf0\x03\x62\xca\xf2\x73\xec\x3c\x15\xaf\x7a\xcd\x15\x97\x34\xe9\x6e\x6e\x34\x30\x05\x59\xbc\x50\x24\x07\x04\xfd\x91\xe2\x7e\xfb\x0d\x29\x4f\x3e\xe6\x9a\x34\x1a\x41\xda\x5d\x70\x17\xa0\xc7\x99\x3a\xf8\x1e\x0e\xd6\xd1\x23\x49\x7f\x6a\xfb\x56\xaf\xfb\xcd\x66\xab\x46\xc6\x99\xce\x81\x5f\x3a\x05\xb0\xe0\x9e\xc9\xa7\xc0\xa3\x0b\x67\x05\x70\x22\x4e\x36\xf8\x0e\x7e\xb7\x7a\xa3\x2f\xea\xad\x6e\xf5\x5a\x99\xe0\x05\xad\x27\x2e\x64\x9c\x87\xdd\xb6\xbc\x00\x1c\x63\xee\x80\xd1\x46\x0e\xbf\xc8\x48\x63\x90\x67\xb7\x92\x37\xdd\xae\x62\x57\x26\xe6\x0a\x37\x5f\x83\x1f\x2b\x3c\x46\xb3\xdb\x3a\xea\xbe\xc6\xbc\xa1\x6f\xdc\x2f\x9c\xec\x23\x61\xa0\x64\xd8\x46\xa9\x7e\xff\x53\xf0\x9e\x60\x02\x64\x82\x34\xa3\x73\x77\xe0\xc2\x79\xe5\x50\xc8\x9b\xeb\x52\xc4\x70\x26\x86\x39\x0c\xe4\x12\x44\x2c\x09\x0b\xb1\x7d\xa5\x01\x24\xc0\x4c\x24\x20\x13\x01\x53\x0a\x99\x0d\x81\x09\x3e\x09\xa3\xf5\x92\x20\x8c\x80\x70\x42\xb6\x24\xd7\x52\xe4\x44\x60\x30\x51\xd2\x0a\xe0\x79\xb2\x09\x3c\x49\x99\x57\x65\xd9\xb4\x50\x36\x9b\x2d\x38\xbc\x12\x27\x40\x3f\x00\x9a\xc9\xd2\x89\x12\xec\xd7\x7a\x0f\x12\xe2\xaa\xad\xdf\x1f\xfe\xd5\xf7\xb5\xbc\x07\x34\x26\x33\x9a\xab\x56\x4c\x23\x31\x79\x43\xa9\x64\xba\x82\x49\x24\xa6\xae\x69\x90\x2f\xf6\xa4\x03\x1f\x9b\x38\x8c\x4d\xbb\x5f\x6f\xf5\x7a\xfb\xb0\x6b\x75\x1c\x46\xe5\xac\x21\x9f\xca\xb2\x3c\xfd\xff\xa4\xac\x8f\x59\x6e\x74\xb9\x46\xea\xc0\xce\x78\xa4\x9a\xf8\xa7\x10\x8b\xed\x0a\xfe\x00\x78\x0b\x28\x2d\x33\x05\x18\xec\x4c\xbe\x6c\x59\xea\xe0\x47\x7b\x07\xff\xdc\x15\x83\xf5\xf1\x53\x85\x2c\x31\x4b\x81\x2e\x9d\x46\x42\xc9\x5c\xa4\x3e\x75\x42\x0f\x0b\x72\xe9\x54\x52\x03\x87\x07\x72\xea\xef\x8e\x37\x89\xd4\x67\x76\x5d\xf5\xdf\x35\xcd\x80\x82\x7a\x98\x9d\xd1\xb3\x6b\xe6\x8b\x27\x69\x96\x89\x36\x55\xb0\xd4\xe9\xea\x13\x89\x96\x8b\xa8\xfa\xab\xa8\x99\x89\xcc\x4b\x0c\xd6\xcb\xbb\x52\x38\x7b\x17\x70\xd0\xef\x6b\x56\x63\xbd\xc9\xcd\x75\xa9\xfc\xa7\x6b\xd9\x6f\xd6\xed\xbe\x5f\xef\xfa\x76\xab\x05\x59\x1f\x5f\x15\x80\x4d\x3d\xb2\x99\xec\x89\x3a\x10\xce\xa4\x50\x84\xed\x21\xcb\x32\xb9\x19\xbd\x1d\x29\x49\x8f\x59\xa6\xc0\x1d\xe0\x61\xc8\x6e\x28\x41\x31\x5a\x67\xfd\xb1\x2f\x9e\x12\x49\x07\xdf\x8a\x85\x47\x12\xf5\x27\x00\x00\xff\xff\x1d\xdb\x54\x77\x1a\x04\x00\x00"

func mobilenet_v1_10_224YmlBytes() ([]byte, error) {
	return bindataRead(
		_mobilenet_v1_10_224Yml,
		"MobileNet_v1_1.0_224.yml",
	)
}

func mobilenet_v1_10_224Yml() (*asset, error) {
	bytes, err := mobilenet_v1_10_224YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "MobileNet_v1_1.0_224.yml", size: 1050, mode: os.FileMode(420), modTime: time.Unix(1501275297, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _inceptionYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xc1\x6e\xd4\x30\x10\xbd\xfb\x2b\xe6\xc2\xad\xeb\x6c\xd2\x6e\x4b\x7d\x40\x42\x70\xa9\x04\x54\x02\xc4\x05\x55\xd1\xac\x3d\x49\x0c\x8e\x6d\xd9\x93\xdd\x2d\x07\xbe\x1d\x39\xd9\x76\x5b\x71\xd9\x4b\xe4\xd1\xbc\x79\xf3\xf2\xe6\x79\x1c\x49\xc1\x9d\xd7\x14\xd9\x06\x2f\xba\x84\x23\xed\x43\xfa\xad\x04\xc0\xd2\xfc\x4e\x3e\x87\xd4\xb9\xb0\x17\x00\x3b\x4a\xd9\x06\xaf\xe0\x6f\x2d\x1b\x79\x10\xcf\xf5\xa5\x5c\x0b\x1d\x3c\xa3\xf5\x94\xca\x30\x8e\xe6\xfa\xaa\x3c\x00\xfa\x38\x29\x48\x68\x63\x0a\xbf\x48\x73\xa5\x31\x8d\x6e\xc5\xcf\xbc\x6a\xc6\xae\x74\x9c\x66\xb8\x3e\x0f\xde\xcf\xf0\x18\xf5\xf5\x95\x23\x75\xde\xe4\x11\x7d\x9c\x3d\x43\xd9\xcb\x01\x43\x59\x27\x3b\xfb\xa4\xe0\x9d\x00\x78\xef\xc1\x8e\xd8\xd3\x4a\x3b\xcc\xd9\x76\x56\x63\x69\x82\x0e\x7e\x17\xdc\x54\xde\xe8\xc0\x13\x17\x43\xa5\x80\x93\xcf\x80\x7a\xb0\xb4\xa3\x0c\x37\x6f\xe5\xfa\x0d\x70\x88\xab\x1a\xd0\x1b\xb8\xbd\x94\xb7\x4b\xbd\x01\xd4\x7a\x4a\xa8\x1f\x21\x78\xe0\x81\xe0\xee\xd3\xb7\x1f\x5f\x3f\x40\xb3\xae\x1b\xd8\xa1\xb3\x66\x59\x67\x90\x31\x13\xcf\x0b\xb8\x2c\xcf\x36\x73\x86\xd0\x41\x47\x7b\x4a\xc0\x03\x7a\x68\x36\x9f\x21\x62\xb9\x2e\x53\xca\x52\x24\xea\x28\x91\xd7\x94\x8b\x75\x2b\x18\x98\x63\x56\x55\x85\xe9\x60\x77\x32\xa4\xbe\x8a\xa6\xab\xea\x4d\xdd\xc8\xf5\x7a\x73\x7d\x23\xa3\xe9\x84\xb3\x9a\x7c\x2e\x99\xb8\xff\x78\x2f\xac\x8f\x13\x1f\xc7\xf9\x31\x92\x5a\xdc\x98\x8d\x7d\xe5\x55\xd1\x3e\x83\x5f\x00\x4e\x5a\x96\xd3\x01\x18\x3b\x92\x2f\x61\xca\x0a\x7e\xd6\x17\x70\x79\x01\x4d\x73\x35\x7f\x1e\x8e\x90\x91\xd0\x97\x66\x7d\x73\x01\x4f\x9f\x07\x11\x26\x8e\x13\x17\x9a\x45\x45\x47\xc8\x53\x2a\x6b\x5e\xa9\x40\x0f\x0b\x72\x51\x51\xee\x02\x0e\xb7\xe4\xc4\xff\x6a\x8e\x14\xb9\x9d\x92\x53\xb3\x37\xaa\xaa\x8a\xcf\xd2\x8c\x4e\xcb\xd1\x55\xe3\xc1\x13\x57\x63\x30\xe4\x72\x35\x13\x96\x3a\x3f\xfa\x72\x09\x3e\xb0\x98\x5b\x85\x6d\x8b\x99\x4e\x3c\xc5\xe3\xcc\x21\x61\x4f\xb2\x0f\xa1\x77\x84\xd1\x66\xa9\xc3\x58\x99\xb0\xf7\x2e\xa0\x91\xa7\xfc\xcd\x87\x78\x5a\xf2\x14\x9e\xcd\x20\xff\xd8\x28\x00\xfa\x84\x71\x68\x23\xf2\xa0\xe0\x34\xd3\x3e\x03\xdb\x19\x20\xe3\x56\x00\xd8\xdc\x62\xd2\x83\xdd\x91\x02\x4e\x13\x09\x64\x4e\x76\x3b\xf1\x12\x80\x11\xbd\xed\x28\x73\x8b\x13\x0f\x21\x29\xc0\xad\x99\x9c\x29\x9e\x26\xb4\xce\xfa\xbe\x3d\xc6\x4c\xc1\x5d\xf9\xdb\x2f\xc4\xe2\x5f\x00\x00\x00\xff\xff\x47\x45\x01\x4f\x3d\x04\x00\x00"

func inceptionYmlBytes() ([]byte, error) {
	return bindataRead(
		_inceptionYml,
		"inception.yml",
	)
}

func inceptionYml() (*asset, error) {
	bytes, err := inceptionYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "inception.yml", size: 1085, mode: os.FileMode(420), modTime: time.Unix(1501275297, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resnet152Yaml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x4d\x6f\xdc\x38\x0c\xbd\xeb\x57\xf0\x07\x64\xe4\xb1\x27\x9e\x9d\xd5\x61\x81\xc5\xee\x25\x40\x91\x00\x69\xd0\x4b\x51\x18\x1c\x99\x1e\xab\x91\x25\x41\xa2\xe6\xa3\x87\xfe\xf6\x42\xf6\x34\x1f\xe8\x25\x17\xc3\x14\xdf\x7b\x24\x1f\xe9\x70\x22\x05\x8f\x94\xee\x89\xeb\xb6\x11\x43\xc4\x89\x4e\x3e\x3e\x2b\x01\xb0\x24\x9f\xc8\x25\x1f\x07\xeb\x4f\x02\xe0\x48\x31\x19\xef\x14\xfc\xac\x65\x23\xcf\xe2\x25\xae\xe5\x5a\x68\xef\x18\x8d\xa3\x58\xc8\x38\xf5\xdb\xdb\xf2\x03\x70\x08\x59\x41\x44\x13\xa2\xff\x4e\x9a\x2b\x8d\x71\xb2\x2b\x7e\xd1\x55\x33\x76\xa5\x43\x9e\xe1\xfa\x63\xf0\xc3\x0c\x0f\x41\x6f\x6f\x2d\xa9\x8f\x31\xaf\xe8\x2b\xf7\x03\x9d\xbd\x25\xf4\x94\x74\x34\x81\xe7\x79\xff\x11\x00\xff\x3a\x30\x13\x1e\x68\xa5\x2d\xa6\x64\x06\xa3\xb1\x24\xc1\x11\x17\x0b\x61\x9f\x8d\x65\xf0\x03\x58\xbc\x50\x4c\xc0\x23\x32\x58\xc2\xe8\x20\x52\x32\x7d\x46\x0b\x43\x76\xba\x90\x12\x9c\x64\x94\xbc\x40\xc1\xb8\x90\x39\x49\x01\xf0\x34\x9a\xf4\x22\xa8\xbd\x4b\x26\x71\x2a\x9a\x75\xdb\xfc\xd6\x45\xd7\x03\xea\xd1\xd0\x91\x12\xfc\xb5\x95\x3b\x60\x1f\x56\xf5\xfc\xfe\xf7\x46\x36\x73\xd8\x02\x6a\x9d\x23\xea\x0b\x78\x07\x77\x9f\x3e\x7f\x79\xfc\x6f\xd5\xac\xeb\x56\x8a\x48\x03\x45\x72\x9a\x52\xb1\x71\x05\x23\x73\x48\xaa\xaa\x30\x9e\xcd\x51\xfa\x78\xa8\x42\x3f\x54\x75\x5b\x37\x72\xbd\xd9\xec\x5a\x19\xfa\x41\x58\xa3\xc9\xa5\x72\x1f\x0f\xff\x3f\x88\xa5\xe1\x85\xce\x97\x40\x6a\x71\x66\x36\xf9\x9d\x6f\x3c\xd2\x32\xdd\x1b\x40\xc0\x72\x75\x4c\x31\x2d\x6b\x04\xe8\xcd\x44\xae\x1c\x56\x52\xf0\xb5\xbe\x81\xcd\x0d\x34\xcd\xed\xfc\xf9\x26\x7c\xe6\x90\xb9\x40\x97\x4a\x03\x21\xe7\x58\xa4\xde\x55\x42\x07\x0b\x72\xa9\x54\x4c\x04\x8b\x7b\xb2\xe2\xcf\x8a\x57\x89\xd4\xe5\x68\xd5\x3c\xbf\xaa\xaa\x1e\x19\x65\x3f\x59\x2d\x27\x5b\x4d\x67\x47\x5c\x4d\xbe\x27\x9b\xaa\x59\xb0\xc4\xe9\xe2\x12\xb1\xe4\x33\x8b\x39\x55\xd4\xf4\x48\xfa\x39\x78\xe3\xf8\x55\xc9\x9f\x9c\xf5\xd8\xcb\xd7\xcb\x9a\x6d\xbd\xca\x45\x4a\x8e\xb8\x3b\xd6\x5d\xdd\x36\x5d\xb3\xae\xb7\xdd\x7a\xd7\x35\x3b\xc9\x18\xe5\xe1\x87\x00\x30\xa9\xc3\xa8\x47\x73\x24\x05\x1c\x33\x09\x64\x8e\x66\x9f\x79\x59\xd9\x84\xce\x0c\x94\xb8\xc3\xcc\xa3\x8f\x0a\x70\xdf\x67\xdb\x17\x87\x22\x1a\x6b\xdc\xa1\x2b\xc3\x24\x62\x05\x77\xa5\xf7\x7b\x62\xf1\x2b\x00\x00\xff\xff\xa9\xfd\x9a\x04\xfb\x03\x00\x00"

func resnet152YamlBytes() ([]byte, error) {
	return bindataRead(
		_resnet152Yaml,
		"resnet152.yaml",
	)
}

func resnet152Yaml() (*asset, error) {
	bytes, err := resnet152YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resnet152.yaml", size: 1019, mode: os.FileMode(420), modTime: time.Unix(1501275297, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resnet50Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xcb\x6e\xdc\x3a\x0c\xdd\xeb\x2b\xf8\x01\x19\xf9\x91\x38\x37\x57\x8b\x02\x45\xbb\x09\x50\x24\x40\x1a\x74\x53\x14\x06\x47\xa6\xc7\x6a\x64\x49\x90\xa8\x79\x74\xd1\x6f\x2f\x64\x4f\xf3\x40\x37\xd9\x18\xa6\x78\xce\x21\x79\x48\x87\x33\x29\x78\xa0\x74\x47\xdc\xd5\x62\x8c\x38\xd3\xc1\xc7\x27\x25\x00\xd6\xdc\x23\xb9\xe4\xe3\x68\xfd\x41\x00\xec\x29\x26\xe3\x9d\x82\xdf\x8d\x6c\xe5\x51\x3c\xc7\x8d\xac\x85\xf6\x8e\xd1\x38\x8a\x85\x8c\xf3\x70\x7d\x55\x7e\x00\x76\x21\x2b\x88\x68\x42\xf4\x3f\x49\x73\xa5\x31\xce\x76\xc3\xcf\xba\x6a\xc1\x6e\x74\xc8\x0b\x5c\xbf\x0f\xbe\x5b\xe0\x21\xe8\xeb\x2b\x4b\xea\x7d\xcc\x33\xfa\xcc\x7d\x47\x67\xaf\x09\x03\x25\x1d\x4d\xe0\x65\xde\x0f\x02\xe0\xa3\x03\x33\xe3\x8e\x36\xda\x62\x4a\x66\x34\x1a\x4b\x12\x1c\x71\xb1\x10\xb6\xd9\x58\x06\x3f\x82\xc5\x13\xc5\x04\x3c\x21\x83\x25\x8c\x0e\x22\x25\x33\x64\xb4\x30\x66\xa7\x0b\x29\xc1\x41\x46\xc9\x2b\x14\x8c\x0b\x99\x93\x14\x00\x8f\x93\x49\xcf\x82\xda\xbb\x64\x12\xa7\xa2\xd9\xd5\x7f\x65\xd1\x0d\x80\x7a\x32\xb4\xa7\x04\xff\x75\xb2\x05\xf6\x61\xd3\x2c\xef\xff\xb7\xe7\xb0\x03\xd4\x3a\x47\xd4\x27\xf0\x0e\x6e\xbf\x7c\xfd\xf6\xf0\x69\xd3\xd6\x4d\x27\x45\xa4\x91\x22\x39\x4d\xa9\xb8\xb8\x81\x89\x39\x24\x55\x55\x18\x8f\x66\x2f\x7d\xdc\x55\x61\x18\xab\xa6\x6b\x5a\x59\x5f\x5e\xde\x74\x32\x0c\xa3\xb0\x46\x93\x4b\xe5\x3c\xee\x3f\xdf\x8b\xb5\xdf\x95\xce\xa7\x40\x6a\x35\x66\xf1\xf8\x8d\x6d\x3c\xd1\x3a\xdc\x2b\x40\xc0\x72\x74\x4c\x31\xad\x5b\x04\x18\xcc\x4c\xae\xdc\x55\x52\xf0\xbd\xb9\x80\xcb\x0b\x68\xdb\xab\xe5\xf3\x43\xf8\xcc\x21\x73\x81\xae\x95\x46\x42\xce\xb1\x48\xbd\xa9\x84\x0e\x56\xe4\x5a\xa9\x78\x08\x16\xb7\x64\xc5\xbf\x15\xcf\x12\xa9\xcf\xd1\xaa\x65\x7e\x55\x55\x03\x32\xca\x61\xb6\x5a\xce\xb6\x9a\x8f\x8e\xb8\x9a\xfd\x40\x36\x55\x8b\x60\x89\xd3\xc9\x25\x62\xc9\x47\x16\x4b\xaa\xa8\xe9\x89\xf4\x53\xf0\xc6\xf1\x8b\x92\x3f\x38\xeb\x71\x90\x2f\x87\xb5\xd8\x7a\x96\x8b\x94\x1c\x71\xbf\x6f\xfa\xae\xee\xdb\xba\xb9\xee\xeb\x9b\xbe\xbd\x91\x8c\x51\xee\x7e\x09\x00\x93\x7a\x8c\x7a\x32\x7b\x52\xc0\x31\x93\x40\xe6\x68\xb6\x99\xd7\x8d\xcd\xe8\xcc\x48\x89\x7b\xcc\x3c\xf9\xa8\x00\xb7\x43\xb6\x43\x31\x28\xa2\xb1\xc6\xed\xfa\x32\x4b\x22\x56\x70\x5b\x5a\xbf\x23\x16\x7f\x02\x00\x00\xff\xff\x86\xb0\xd0\xaf\xf8\x03\x00\x00"

func resnet50YmlBytes() ([]byte, error) {
	return bindataRead(
		_resnet50Yml,
		"resnet50.yml",
	)
}

func resnet50Yml() (*asset, error) {
	bytes, err := resnet50YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resnet50.yml", size: 1016, mode: os.FileMode(420), modTime: time.Unix(1501275297, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vgg19Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x3d\x8f\xdc\x38\x0c\xed\xf5\x2b\xd8\x5c\xb7\x23\x8f\x66\x67\xe6\x66\x54\x1c\x70\xc0\x01\x8b\x6b\xb2\x4d\x90\x26\x08\x0c\xae\x4c\xdb\xca\xca\x92\x20\x51\xf3\x91\x22\xbf\x3d\x90\x3d\xd9\x0f\xa4\xd9\xc6\x10\xcd\xc7\x47\xf2\xf1\x79\x9c\x48\xc3\x97\x87\x07\x75\x14\x7d\xc2\x89\xce\x21\x3d\x6b\x01\xb0\x24\x3e\x93\xcf\x21\xf5\x2e\x9c\x05\xc0\x89\x52\xb6\xc1\x6b\xf8\xa9\xe4\x46\x5e\xc4\x4b\xac\xe4\x5a\x98\xe0\x19\xad\xa7\x54\x8b\x71\xea\xf6\xdb\xfa\x00\x18\x62\xd1\x90\xd0\xc6\x14\xbe\x93\xe1\xc6\x60\x9a\xdc\x8a\x5f\x78\xf5\x8c\x5d\x99\x58\x66\xb8\xf9\x18\x7c\x98\xe1\x31\x9a\xfd\xd6\x91\xfe\x58\xe5\x0d\x7d\xab\xfd\xc0\x64\x6f\x0b\x3a\xca\x26\xd9\xc8\xf3\xbe\xff\x08\x80\x7f\x3d\xd8\x09\x07\x5a\x19\x87\x39\xdb\xde\x1a\xac\x49\x30\xc1\x9f\x82\x2b\xf5\x8d\x0e\x3c\x71\x15\x54\x0a\x58\x34\x86\x92\x29\x03\xfe\xfe\x0f\x67\xcb\x23\xa8\x23\x38\xbc\x52\xca\x10\x7a\xb8\xbf\xdc\xbf\xe5\x80\xde\x3a\xa6\x94\x5f\x19\xd0\x8c\x96\x4e\x94\xe1\x6f\x25\xd5\x5f\xc0\x21\xae\x14\xa0\xef\xe0\x70\x94\x87\x25\xde\x01\x1a\x53\x12\x9a\x2b\x04\x0f\x3c\x12\xfc\x5f\x47\xfd\x44\x0c\x66\x44\xe7\xc8\x0f\x04\x1d\x32\x66\x62\xb0\x1e\x36\x6b\xb5\x93\x22\x51\x4f\x89\xbc\xa1\x5c\x05\x5d\xc1\xc8\x1c\xb3\x6e\x1a\x4c\x17\x7b\x92\x21\x0d\x4d\xec\xfa\x46\x6d\xd7\x47\xa9\x76\xbb\xbd\x8c\x5d\x2f\x9c\x35\xe4\x73\x35\xca\xe3\x7f\x8f\xc2\xfa\x58\xf8\x56\xcd\xd7\x48\x7a\x91\x68\x56\xfb\x9d\x80\x75\xa4\x19\xfc\x06\x10\xb1\xda\xaf\xee\xba\xdc\x13\xa0\xb3\x13\xf9\xea\xb0\xac\xe1\xab\xba\x83\xfb\x3b\xd8\x6c\xb6\xf3\xe7\x9b\x08\x85\x63\xe1\x0a\x5d\x3a\xf5\x84\x5c\x52\xa5\x7a\xd7\x09\x3d\x2c\xc8\xa5\x53\x15\x1e\x1c\x3e\x91\x13\x7f\x76\xbc\x51\xe4\xb6\x24\xa7\xe7\xf5\x75\xd3\x54\x99\x64\x37\x39\x23\x27\xd7\x4c\x17\x4f\xdc\x4c\xa1\x23\x97\x9b\x99\xb0\xc6\xf9\xea\x33\xb1\xe4\x0b\x8b\x39\x55\xd9\xcc\x48\xe6\x39\x06\xeb\xf9\x95\x29\x9c\xbd\x0b\xd8\xc9\x57\x8b\xcd\xaa\xde\xe8\x4e\xc3\xd0\xaa\x63\xbb\x59\xab\x7d\xbb\x3e\xb4\x9b\x83\x64\x4c\x72\xf8\x21\x00\x6c\x6e\x31\x99\xd1\x9e\x48\x03\xa7\x42\x02\x99\x93\x7d\x2a\xbc\x9c\x6a\x42\x6f\x7b\xca\xdc\x62\xe1\x31\x24\x0d\xf8\xd4\x15\xd7\x55\x69\x12\x5a\x67\xfd\xd0\xde\x8e\xad\x5f\x8c\x20\x7e\x05\x00\x00\xff\xff\xa4\x75\x03\x89\xf9\x03\x00\x00"

func vgg19YmlBytes() ([]byte, error) {
	return bindataRead(
		_vgg19Yml,
		"vgg19.yml",
	)
}

func vgg19Yml() (*asset, error) {
	bytes, err := vgg19YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vgg19.yml", size: 1017, mode: os.FileMode(420), modTime: time.Unix(1501275297, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"MobileNet_v1_0.25_128.yml": mobilenet_v1_025_128Yml,
	"MobileNet_v1_0.25_224.yml": mobilenet_v1_025_224Yml,
	"MobileNet_v1_0.50_128.yml": mobilenet_v1_050_128Yml,
	"MobileNet_v1_0.50_224.yml": mobilenet_v1_050_224Yml,
	"MobileNet_v1_0.75_128.yml": mobilenet_v1_075_128Yml,
	"MobileNet_v1_0.75_224.yml": mobilenet_v1_075_224Yml,
	"MobileNet_v1_1.0_128.yml": mobilenet_v1_10_128Yml,
	"MobileNet_v1_1.0_224.yml": mobilenet_v1_10_224Yml,
	"inception.yml": inceptionYml,
	"resnet152.yaml": resnet152Yaml,
	"resnet50.yml": resnet50Yml,
	"vgg19.yml": vgg19Yml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"MobileNet_v1_0.25_128.yml": &bintree{mobilenet_v1_025_128Yml, map[string]*bintree{}},
	"MobileNet_v1_0.25_224.yml": &bintree{mobilenet_v1_025_224Yml, map[string]*bintree{}},
	"MobileNet_v1_0.50_128.yml": &bintree{mobilenet_v1_050_128Yml, map[string]*bintree{}},
	"MobileNet_v1_0.50_224.yml": &bintree{mobilenet_v1_050_224Yml, map[string]*bintree{}},
	"MobileNet_v1_0.75_128.yml": &bintree{mobilenet_v1_075_128Yml, map[string]*bintree{}},
	"MobileNet_v1_0.75_224.yml": &bintree{mobilenet_v1_075_224Yml, map[string]*bintree{}},
	"MobileNet_v1_1.0_128.yml": &bintree{mobilenet_v1_10_128Yml, map[string]*bintree{}},
	"MobileNet_v1_1.0_224.yml": &bintree{mobilenet_v1_10_224Yml, map[string]*bintree{}},
	"inception.yml": &bintree{inceptionYml, map[string]*bintree{}},
	"resnet152.yaml": &bintree{resnet152Yaml, map[string]*bintree{}},
	"resnet50.yml": &bintree{resnet50Yml, map[string]*bintree{}},
	"vgg19.yml": &bintree{vgg19Yml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

